@model List<UiUser>

@{
    ViewData["Title"] = "Manage Users";
    List<UiRole>? roles = ViewData["UserRoles"] as List<UiRole>;
    List<(string, int)> roleCounts = Model
        .GroupBy(user => user.UserRoleName!)
        .Select(group => (Role: group.Key, Count: group.Count()))
        .ToList();
}

<style>
    .card:hover {
        box-shadow: 0 3px 15px rgba(0, 0, 0, 0.3);
        /* cursor: pointer; */
    }

</style>

<link href="~/css/filtersStyles.css" rel="stylesheet"/>

<div class="row mb-3">
    <div class="col-8 offset-2 col-sm-6 offset-sm-3 col-lg-8 offset-lg-2 text-center">
        <h3 class="mb-0">Χρήστες Εφαρμογής</h3>
    </div>
    <div class="col-2 col-sm-3 col-lg-2 m-0 text-end px-2 px-sm-0 px-lg-2">
        <a class="btn btn-outline-primary border border-1 d-none px-2 py-1" id="createUserAccountButton" asp-controller="UserManagement" asp-action="CreateUser">Δημιουργία Χρήστη</a>
    </div>
</div>
@* <hr style="color:#484848" class="d-none d-sm-block">  *@

<button id="filterToggleButton" class="btn btn-primary rounded-0 d-xl-none px-3" style="position: fixed; top: 320px; left: 0px; z-index: 1050; transform: rotate(-90deg);
            transform-origin: top left; background-color:white !important; color: var(--accent-orange) !important; border: #aaa solid 1px; border-top:none; transition: left 0.4s ease;">
    Φίλτρα
</button>

<div class="row">
    <div class="col-3" id="filtersSection">
        <div class="card" style="position: sticky !important; top:135px; align-self:flex-start !important;" id="cardFilters">
            <div class="card-header d-none d-xl-block">
                <h4 class="text-center mb-0">Φίλτρα</h4>
            </div>
            <div class="card-body">
                <div class="p-3 border border-1 mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <label id="searchLabel" for="searchInput" class="mt-1">ΑΝΑΖΗΤΗΣΗ</label>
                        <div class="btn-group dropdown" role="group">
                            <button type="button" class="btn btn-primary"> <i id="searchButtonIconIndicator" class="fa-solid fa-envelope"></i> </button>
                            <button type="button" class="btn btn-dark dropdown-toggle" style="width:40px;" data-bs-toggle="dropdown" aria-expanded="false"></button>
                            <div class="dropdown-menu dropdown-menu-end py-0" style="margin-top: 0 !important;">
                                <a class="dropdown-item d-flex justify-content-between align-items-center" href="#" data-search-mode="email">Αναζήτηση με Email<i class="fa-solid fa-envelope ms-2"></i></a>
                                <a class="dropdown-item d-flex justify-content-between align-items-center" href="#" data-search-mode="phoneNumber">Αναζήτηση με Τηλέφωνο<i class="fa-solid fa-phone ms-2"></i></a>
                                <a class="dropdown-item d-flex justify-content-between align-items-center" href="#" data-search-mode="lastName">Αναζήτηση με Επώνυμο<i class="fa-solid fa-user ms-2"></i></a>
                            </div>
                        </div>
                    </div>
                    <div class="input-group mt-3">
                        <input type="text" class="form-control" id="searchInput" value="">
                        <a class="btn btn-primary" id="searchButton"><i class="fas fa-search"></i></a>
                    </div>
                </div>
                
                <div class="custom-accordion">
                    <div class="custom-accordion-item">
                        <button class="custom-accordion-button" type="button" aria-expanded="false">
                            ΡΟΛΟΣ ΧΡΗΣΤΗ
                        </button>
                        <div class="custom-accordion-content">
                            <ul class="list-unstyled" id="roleFiltersUl"> 
                                @foreach((string, int) roleCount in roleCounts){
                                    <li class="toggle-check d-flex justify-content-between align-items-center px-2 py-1 hover-highlight" data-role-name = "@roleCount.Item1">
                                        <label class="mb-0 text-smaller" style="cursor:pointer;">@roleCount.Item1 (@roleCount.Item2)</label>
                                        <input type="checkbox" class="form-check-input rounded-0" style="cursor:pointer;">
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-xl-9" id="objectsSection">
        <div class="row mb-1 mb-sm-2 px-2 px-sm-0 px-lg-2">
            <div class="col-12 col-md-6 px-0">
                <ul class="pagination justify-content-md-start justify-content-center align-items-center mb-1 mb-md-0 @(Model.Count > 18 ? "" : "d-none")" id="paginationUl" data-total-items="@Model.Count">
                    <li class="page-item me-1" id="goToFirstPaginationLi">
                        <a class="page-link special rounded-0" style="padding-top:4px !important; padding-bottom:4px !important; width:35px;" href="?page=0">
                            <span aria-hidden="true" class="text-md-biggest">«</span>
                        </a>
                    </li>
                    <li class="page-item me-1" id="goToPreviousPaginationLi">
                        <a class="page-link special rounded-0" style="padding-top:4px !important; padding-bottom:4px !important; width:35px;" href="?page=0">
                            <span class="text-md-biggest" aria-hidden="true">‹</span>
                        </a>
                    </li>
                    <li class="page-item active page-li">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">1</a>
                    </li>
                    <li class="page-item page-li @(Model.Count > 54 ? "" : "d-none")">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">2</a>
                    </li>
                    <li class="page-item page-li @(Model.Count > 72 ? "" : "d-none")">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">3</a>
                    </li>
                    <li class="page-item page-li @(Model.Count > 90 ? "" : "d-none")">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">4</a>
                    </li>
                    <li class="page-item disabled @(Model.Count > 108 ? "" : "d-none")">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">…</a>
                    </li>
                    <li class="page-item page-li">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">@Math.Ceiling((double)@Model.Count / 18) </a>
                    </li>
                    <li class="page-item ms-1" id="goToNextPaginationLi">
                        <a class="page-link special rounded-0" style="padding-top:4px !important; padding-bottom:4px !important; width:35px;" href="?page=1">
                            <span aria-hidden="true" class="text-md-biggest">›</span>
                        </a>
                    </li>
                    <li class="page-item ms-1" id="goToLastPaginationLi">
                        <a class="page-link special rounded-0" style="padding-top:4px !important; padding-bottom:4px !important; width:35px;" href="?page=1182">
                            <span aria-hidden="true" class="text-md-biggest">»</span>
                        </a>
                    </li>
                </ul>
            </div>
            <div class="col-12 col-md-6 px-0 mb-1 mb-sm-0">
                <div class="d-flex gap-2 justify-content-md-end justify-content-sm-center justify-content-between">
                    <div class="dropdown option-dropdown">
                        <button class="btn dropdown-toggle rounded-0 text-md-bigger px-1 px-sm-3" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="background-color:#F5F5F5;">
                            Προεπιλεγμένη Σειρά
                        </button>
                        <ul class="dropdown-menu py-0" id="sortingDropdown">
                            <li data-order="defaultOrder"><a class="dropdown-item" href="#">Προεπιλεγμένη Σειρά</a></li>
                            <li data-order="emailOrder"><a class="dropdown-item" href="#">Αλφαβητικά κατά Email</a></li>
                            <li data-order="lastNameOrder"><a class="dropdown-item" href="#">Αλφαβητικά κατά Επώνυμο</a></li>
                            <li data-order="roleOrder"><a class="dropdown-item" href="#">Αλφαβητικά κατά Ρόλο</a></li>
                        </ul>
                    </div>
                    <div class="dropdown option-dropdown">
                        <button class="btn dropdown-toggle rounded-0 text-md-bigger px-1 px-sm-3" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="background-color:#F5F5F5;" id="pagesDropdown">
                            18 Ανά Σελίδα
                        </button>
                        <ul class="dropdown-menu py-0">
                            <li><a class="dropdown-item" onclick="updateItemsPerPage(18)" href="#">18 Ανά Σελίδα</a></li>
                            <li><a class="dropdown-item" onclick="updateItemsPerPage(36)" href="#">36 Ανά Σελίδα</a></li>
                            <li><a class="dropdown-item" onclick="updateItemsPerPage(72)" href="#">72 Ανά Σελίδα</a></li>
                            <li><a class="dropdown-item" onclick="updateItemsPerPage(120)" href="#">120 Ανά Σελίδα</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="row px-2 px-sm-0 px-md-0 px-lg-2" id="itemsContainer">
            <div class="table-responsive w-100 p-0">
                <table class="table table-hover table-striped" id="usersTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Email</th>
                            <th class="text-nowrap">Ρόλος Χρήστη</th>
                            <th>Τηλέφωνο</th>
                            <th>Όνομα</th>
                            <th>Επώνυμο</th>
                            <th>Επεξεργασία</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int counter = 0;
                        }
                        @foreach (UiUser user in Model)
                        {
                            if (counter > 17)
                                break;
                            string phoneNumber = !string.IsNullOrEmpty(user.PhoneNumber) ? user.PhoneNumber : "";
                            string firstName = !string.IsNullOrEmpty(user.FirstName) ? user.FirstName : "";
                            string lastName = !string.IsNullOrEmpty(user.LastName) ? user.LastName : "";
                            <tr>
                                <td>@user.Email</td>
                                <td>@user.UserRoleName</td>
                                <td>@phoneNumber</td>
                                <td>@firstName</td>
                                <td>@lastName</td>
                                <td class="text-nowrap">
                                    <a class="btn btn-sm btn-primary me-2" asp-controller="userManagement" asp-action="EditUser" asp-route-userId="@user.Id"><i class="fa-solid fa-user-pen"></i></a>
                                    <a class="btn btn-sm btn-primary me-2" style="width:33.5px;height:29px;" href="#"><i class="fa-solid fa-box"></i></a>
                                    <a class="btn btn-sm btn-secondary" data-bs-toggle="modal" data-bs-target="#deleteUserAccountConfirmationModal-@user.Id"><i class="fa-solid fa-user-xmark"></i></a>
                                </td>
                            </tr>

                            counter++;
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@foreach(UiUser user in Model)
{
    <div class="modal fade custom-center-modal" id="deleteUserAccountConfirmationModal-@user.Id" tabindex="-1">
        <div class="modal-dialog">
            <form class="modal-content" method="post" asp-controller="UserManagement" asp-action="DeleteUserAccount" id="deleteUserAccountForm-@user.Id">
                <div class="modal-header">
                    <h5 class="modal-title">Επιβεβαίωση Διαγραφής Λογαριασμού</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <strong style="font-size: 18px;">Η παρακάτω ενέργεια δεν είναι αντιστρέψιμη!</strong>
                    <p>
                        Αν είστε σίγουροι πως θέλετε να διαγράψατε τον λογαριασμό χρήστη παρακαλώ συμπληρώστε το email του λογαριασμού και πατήστε συνέχεια.
                    </p>
                    <p>
                        Ο χρήστης θα ενημερωθεί για την διαγραφή του λογαριασμού του μέσω email.
                    </p>
                    <label for="modalDeleteAccountInput-@user.Id" class="form-label"><i class="fa-solid fa-envelope me-2"></i>Διεύθυνση e-mail Λογαριασμού</label>
                    <input class="form-control" id="modalDeleteAccountInput-@user.Id" type="email" data-custom-validation="false" data-testid="emailInput" data-account-email="@user.Email">
                    <span id="modalDeleteAccountValidationSpan-@user.Id" class="text-danger"></span>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-testid="cancelDeleteAccountButton">Ακύρωση</button>
                    <button type="submit" class="btn btn-primary" id="deleteUserAccountButton" data-testid="deleteUserAccountButton">Συνέχεια</button>
                </div>
                <input name="userId" value="@user.Id" hidden />
                <input name="userEmail" value="@user.Email" hidden />
            </form>
        </div>
    </div>
}

<div class="modal fade custom-center-modal modal-result" data-bs-backdrop="static" id="resultModal" data-testid="resultModal" data-popUpValue="" tabindex="-1">
    <div class="modal-dialog modal-confirm">
        <div class="modal-content">
            <div class="modal-header border-0">
                <div class="icon-box">
                    <i class="fas fa-check"></i>
                </div>
                <h4 class="modal-title w-100" id="myModalLabel"></h4>
            </div>
            <div class="modal-body">
                <p class="text-center"></p>
            </div>
            <div class="modal-footer d-flex justify-content-center">
                <button class="btn btn-primary w-75" data-bs-dismiss="modal" data-testid="resultModalCloseButton">Εντάξει</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript" src="~/js/customModals.js"></script>
    <script type="text/javascript" src="~/js/filtersBehaviour.js"></script>

    <script>
        let users = JSON.parse('@Html.Raw(Json.Serialize(Model))');
        users = users.map((user, index) => ({ //weird syntax, but essentially what this does is it adds to every user a property that indicates on whether or not the user is filtered
            ...user,
            originalIndex: index,
            isFilteredBySearch: false,
            protectedByRoleLis: []
        }));
        let usersTableTBody = document.getElementById('usersTable').querySelector('tbody');
        let userTrs = usersTableTBody.querySelectorAll('tr');

        let isRoleFilterActive = 0;
        let searchInput = document.getElementById('searchInput');
        let searchButtonIconIndicator = document.getElementById('searchButtonIconIndicator');
        let searchMode = "email";

        /* pagination change */
        document.addEventListener('pagination:pageChange', function (event) {
            renderUsers();
        });

        /* items per page change */
        document.addEventListener('itemsPerPage:changed', function (event) {
            renderUsers();
        });

        /* checkbox filters */
        document.getElementById('roleFiltersUl').querySelectorAll('li').forEach(li => {
            li.addEventListener("click", function () {
                let filterCheckBox = li.querySelector('input');
                let liRoleName = li.getAttribute('data-role-name').toLowerCase().trim();
                if (filterCheckBox.checked) {
                    users = users.map(user => {
                        const userRole = user.userRoleName?.toLowerCase().trim();
                        // If user role does not match the li role, add the liRoleName to the filter(the second part of the && is for safety)
                        if (userRole === liRoleName && !user.protectedByRoleLis.includes(liRoleName)) {
                            user.protectedByRoleLis.push(liRoleName);
                        }

                        return user;
                    });

                    isRoleFilterActive++;
                }
                else {
                    users.forEach(user => {
                        const index = user.protectedByRoleLis.indexOf(liRoleName);
                        if (index > -1) {
                            user.protectedByRoleLis.splice(index, 1);
                        }
                    });

                    isRoleFilterActive--;
                }

                countHowManyUsersAreLeftUnfilteredAndUpdatePagination();
                renderUsers();
            });
        });

        /* search filters */
        const searchModeLinks = document.querySelectorAll('a[data-search-mode]').forEach(link => {
            link.addEventListener("click", function () {
                if (searchMode === link.getAttribute('data-search-mode')) {
                    return;
                }

                searchInput.value = "";
                searchMode = link.getAttribute('data-search-mode');
                if (searchMode === "email") {
                    searchButtonIconIndicator.classList.remove('fa-user', 'fa-phone');
                    searchButtonIconIndicator.classList.add('fa-envelope');
                }
                else if (searchMode === "phoneNumber") {
                    searchButtonIconIndicator.classList.remove('fa-user', 'fa-envelope');
                    searchButtonIconIndicator.classList.add('fa-phone');
                }
                else if (searchMode === "lastName") {
                    searchButtonIconIndicator.classList.remove('fa-phone', 'fa-envelope');
                    searchButtonIconIndicator.classList.add('fa-user');
                }

                users.forEach(user => user.isFilteredBySearch = false);
                countHowManyUsersAreLeftUnfilteredAndUpdatePagination();
                renderUsers();
            });
        });

        let searchTimeOut;
        searchInput.addEventListener('input', () => {
            clearTimeout(searchTimeOut);
            searchTimeOut = setTimeout(() => {
                let query = searchInput.value.trim().toLowerCase();
                if(query === ""){
                    users = users.map(user => ({
                        ...user,
                        isFilteredBySearch: false
                    }));
                }
                else if (searchMode === "email") {
                    users = users.map(user => {
                        const match = user.email?.toLowerCase().includes(query);
                        return {
                            ...user,
                            isFilteredBySearch: !match
                        };
                    });
                }
                else if (searchMode === "phoneNumber") {
                    users = users.map(user => {
                        const match = user.phoneNumber?.toLowerCase().includes(query);
                        return {
                            ...user,
                            isFilteredBySearch: !match
                        };
                    });
                }
                else if (searchMode === "lastName") {
                    users = users.map(user => {
                        const match = user.lastName?.toLowerCase().includes(query);
                        return {
                            ...user,
                            isFilteredBySearch: !match
                        };
                    });
                }

                countHowManyUsersAreLeftUnfilteredAndUpdatePagination();
                renderUsers();
            }, 500);
        });

        function countHowManyUsersAreLeftUnfilteredAndUpdatePagination() {
            let userCount = 0;
            users.forEach(user => {
                if (!user.isFilteredBySearch && (isRoleFilterActive === 0 || user.protectedByRoleLis.length > 0)) {
                    userCount++;
                }
            });

            //this exists in filtersBehaviour.js
            updateTotalItems(userCount);
        }

        /* sorting */
        document.getElementById('sortingDropdown').querySelectorAll('li').forEach(li => {
            li.addEventListener('click', function () {
                if (li.getAttribute('data-order') === "defaultOrder") {
                    users.sort((a, b) => a.originalIndex - b.originalIndex);
                }
                else if (li.getAttribute('data-order') === "emailOrder") {
                    users.sort((userA, userB) => (userA.email || '').localeCompare(userB.email || ''));
                }
                else if (li.getAttribute('data-order') === "lastNameOrder") {
                    users.sort((userA, userB) => (userA.lastName || '').localeCompare(userB.lastName || ''));
                }
                else if (li.getAttribute('data-order') === "roleOrder") {
                    users.sort((userA, userB) => (userA.userRoleName || '').localeCompare(userB.userRoleName || ''));
                }

                renderUsers();
            });
        });

        /* user rendering */
        function renderUsers() {
            usersTableTBody.innerHTML = '';

            const start = (currentPage - 1) * itemsPerPage;
            let counter = 0;
            let renderedCount = 0;

            for (const user of users) {
                if (renderedCount >= itemsPerPage) {
                    break
                };

                if (user.isFilteredBySearch) {
                    continue;
                }
                else if(isRoleFilterActive > 0 && user.protectedByRoleLis.length === 0){
                    continue;
                }

                if (counter < start) {
                    counter++;
                    continue;
                }

                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${user.email}</td>
                    <td>${user.userRoleName}</td>
                    <td>${user.phoneNumber ?? ''}</td>
                    <td>${user.firstName ?? ''}</td>
                    <td>${user.lastName ?? ''}</td>
                    <td class="text-nowrap">
                        <a class="btn btn-sm btn-primary me-2" href="/userManagement/EditUser?userId=${user.id}"><i class="fa-solid fa-user-pen"></i></a>
                        <a class="btn btn-sm btn-primary me-2" style="width:33.5px;height:29px;" href="#"><i class="fa-solid fa-box"></i></a>
                        <a class="btn btn-sm btn-secondary" data-bs-toggle="modal" data-bs-target="#deleteUserAccountConfirmationModal-${user.id}"><i class="fa-solid fa-user-xmark"></i></a>
                    </td>
                `;
                usersTableTBody.appendChild(tr);

                renderedCount++;
                counter++;
            }
        }

        /* ------------------------------------- */
        document.querySelectorAll('.custom-accordion-button').forEach(button => {
            button.addEventListener('click', function () {
                const content = this.nextElementSibling;
                const isExpanded = content.classList.contains('expanded');

                this.setAttribute('aria-expanded', !isExpanded);
                this.classList.toggle('collapsed', !isExpanded);
                content.classList.toggle('expanded', !isExpanded);
            });
        });

        let createUserAccountButton = document.getElementById('createUserAccountButton');
        function updateCreateUserButtonText() {
            if (window.innerWidth < 576) {
                createUserAccountButton.innerHTML = '<i class="fa-solid fa-user-plus"></i>';
            }
            else if (window.innerWidth < 1480) {
                createUserAccountButton.innerHTML = 'Δημιουργία';
                createUserAccountButton.classList.remove('py-1', 'px-2');
            }
            else {
                createUserAccountButton.innerHTML = 'Δημιουργία Χρήστη';
                createUserAccountButton.classList.remove('py-1', 'px-2');
            }

            createUserAccountButton.classList.remove('d-none');
        }

        window.addEventListener("load", updateCreateUserButtonText);
        window.addEventListener("resize", updateCreateUserButtonText);

        function updateObjectsContainer() {
            if (window.innerWidth < 1650) {
                objectsSection.classList.remove('col-xl-9');
                objectsSection.classList.add('col-xl-8');
            }
            else if (window.innerWidth < 2350) {
                objectsSection.classList.add('col-xl-9');
                objectsSection.classList.remove('col-xl-8');
            }
            //for very big screens
            else {
                objectsSection.classList.add('col-xl-9');
                objectsSection.classList.remove('col-xl-8');
            }
        }

        window.addEventListener("load", updateObjectsContainer);
        window.addEventListener("resize", updateObjectsContainer);

        //TODO do filters
        //Here we will have to somehow read all the data from the Model
        
        /* Delete Account Custom Modal Validation */
        let modalDeleteAccountsInputs = document.querySelectorAll('[id^="modalDeleteAccountInput"]');
        modalDeleteAccountsInputs.forEach(modalDeleteAccountInput => {
            modalDeleteAccountInput.addEventListener("focusout", function () {
                modalDeleteAccountInput.setAttribute('data-custom-validation', 'true');
                let userAccountEmail = modalDeleteAccountInput.getAttribute('data-account-email');
                if (modalDeleteAccountInput.value !== userAccountEmail) {
                    modalDeleteAccountInput.nextElementSibling.textContent = "The provided value does not match the user account's email";
                }
                else {
                    modalDeleteAccountInput.nextElementSibling.textContent = '';
                }
            });
        });

        modalDeleteAccountsInputs.forEach(modalDeleteAccountInput => {
            modalDeleteAccountInput.addEventListener("input", function () {
                let userAccountEmail = modalDeleteAccountInput.getAttribute('data-account-email');
                if (modalDeleteAccountInput.value === "" && modalDeleteAccountInput.getAttribute('data-custom-validation') === 'true') {
                    modalDeleteAccountInput.nextElementSibling.textContent = "This field is required";
                }
                else if (modalDeleteAccountInput.value !== userAccountEmail && modalDeleteAccountInput.getAttribute('data-custom-validation') === 'true') {
                    modalDeleteAccountInput.nextElementSibling.textContent = "The provided value does not match the user account's email";
                }
                else if (modalDeleteAccountInput.value === userAccountEmail && modalDeleteAccountInput.getAttribute('data-custom-validation') === 'true') {
                    modalDeleteAccountInput.nextElementSibling.textContent = '';
                }
            });
        });

        //this means pick all the ids that start with this "deleteUserAccountForm"
        document.querySelectorAll('[id^="deleteUserAccountForm"]').forEach(form => {
            form.addEventListener('submit', function (e) {
                let modalDeleteAccountInput = form.querySelector('input');
                let modalDeleteAccountValidationSpan = form.querySelector('span');
                if (modalDeleteAccountInput.getAttribute('data-custom-validation') !== 'true' || modalDeleteAccountValidationSpan.textContent !== '') {
                    if (modalDeleteAccountInput.value === "") {
                        modalDeleteAccountValidationSpan.textContent = "This field is required";
                    }

                    e.preventDefault();
                }
            });
        });

        /* Server Validation Handling */
        const userDeletionSuccess = '@TempData["UserDeletionSuccess"]' === 'True';
        const userCreationSuccess = '@TempData["UserCreationSuccess"]' === 'True';
        const userNotFoundWithGivenId = '@TempData["UserNotFoundWithGivenId"]' === 'True';
        const unknownError = '@TempData["UnknownError"]' === 'True';

        let resultModal = document.getElementById("resultModal");

        if (userDeletionSuccess) {
            resultModal.setAttribute("popUpValue", "userDeletionSuccess");
            showPopUpModal("resultModal", "Επιτυχία Διαγραφής Λογαριασμού Χρήστη", "Ο λογαριασμός του χρήστη διαγράφτηκε επιτυχώς και ένα email ειδοποίησης έχει σταλθεί στον ηλεκτρονικό ταχυδρομικό λογαριασμό του χρήστη!", "Επιτυχία", 
                "Ο λογαριασμός του χρήστη διαγράφτηκε επιτυχώς και ένα email ειδοποίησης έχει σταλθεί στον ηλεκτρονικό ταχυδρομικό λογαριασμό του χρήστη!", "success");
        }
        else if(userCreationSuccess){
            resultModal.setAttribute("popUpValue", "userCreationSuccess");
            showPopUpModal("resultModal", "Επιτυχία Δημιουργίας Λογαριασμού Χρήστη", "Ο λογαριασμός του χρήστη δημιουργήθηκε επιτυχώς, μπορείτε να τον διαχειριστείτε χρησιμοποιώντας αυτό το menu!", "Επιτυχία",
                "Ο λογαριασμός του χρήστη δημιουργήθηκε επιτυχώς, μπορείτε να τον διαχειριστείτε χρησιμοποιώντας αυτό το menu!", "success");
        }
        else if (userNotFoundWithGivenId) {
            resultModal.setAttribute("popUpValue", "userNotFoundWithGivenId");
            showPopUpModal('resultModal', "Αποτυχία Διαγραφής Λογαριασμού Χρήστη", "Ο χρήστης που προσπαθίσατε να διαγράψετε δεν βρέθηκε στο σύστημα. Παρακαλώ ανανεώστε την σελίδα σας και δοκιμάστε ξανά.",
                "Αποτυχία", "Ο χρήστης που προσπαθίσατε να διαγράψετε δεν βρέθηκε στο σύστημα. Παρακαλώ ανανεώστε την σελίδα σας και δοκιμάστε ξανά.");
        }
        else if (unknownError) {
            resultModal.setAttribute("popUpValue", "unknownError");
            showPopUpModal('resultModal', "Αποτυχία Διαγραφής Λογαριασμού Χρήστη", "Κάποιο πρόβλημα συνέβη από την μεριά του συστήματος. Παρακαλώ δοκιμάστε αργότερα.",
                "Αποτυχία", "Απρόβλεπρο πρόβλημα. Παρακαλώ δοκιμάστε αργότερα.");
        }

    </script>
}
