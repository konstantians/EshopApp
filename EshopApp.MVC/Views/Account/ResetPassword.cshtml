@model ResetPasswordViewModel

@{
    ViewData["Title"] = "Reset Password";
    string? userId = "";
    if (ViewData["UserId"] is not null)
        userId = (string)ViewData["UserId"]!;
    else if (TempData["UserId"] is not null)
        userId = (string)TempData["UserId"]!;

    string? tokenValue = "";
    if (ViewData["Token"] is not null)
        tokenValue = (string)ViewData["Token"]!;
    else if(TempData["Token"] is not null)
        tokenValue = (string)TempData["Token"]!;
}

<form class="offset-1 col-10 offset-md-2 col-md-8" method="post" asp-controller="Account" asp-action="ResetPassword" id="resetPasswordForm" style="max-width: 460px !important;">
    <div id="resetPasswordErrorAlert" class="d-none border border-1 text-center p-4 mb-2" style="transition: opacity 20s ease;">
        <i class="fa-solid fa-circle-xmark text-info" style="font-size:60px"></i>
        <h4 class="fw-bold mt-2">Αποτυχία Αλλαγής Συνθηματικού</h4>
        <p class="text-muted mb-0 text-center"></p>
        <button class="btn btn-primary w-50 mt-3" type="button" onclick="hideAlert(this)">OK</button>
    </div>
    <h3 class="text-center mb-3 mb-lg-4">Αλλαγή Συνθηματικού</h3>
    <div class="mb-4" role="group">
        <label for="userEmailField"><i class="fa-solid fa-envelope me-2"></i>Διεύθυνση e-mail</label>
        <input class="form-control" id="userEmailField" value="@ViewData["UserEmail"]" readonly>
    </div>
    <div class="mb-4" role="group">
        <label asp-for="Password"><i class="fa-solid fa-lock me-2"></i>Νέο Συνθηματικό</label>
        <input class="form-control" asp-for="Password" type="password" placeholder="Enter password"
                aria-labelledby="passwordLabel" data-testid="passwordInput">
        <span asp-validation-for="Password" class="text-danger"></span>
    </div>
    <div role="group" style="margin-bottom: 1.75rem;">
        <label asp-for="ConfirmPassword"><i class="fa-solid fa-lock me-2"></i>Επιβεβαίωση Συνθηματικού</label>
        <input class="form-control" asp-for="ConfirmPassword" type="password" placeholder="Enter your password again"
               aria-labelledby="passwordLabel" data-testid="passwordInput">
        <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
    </div>
    <div class="d-flex justify-content-center">
        <button type="submit" class="btn btn-primary py-2 border-3" style="border-color:black !important; width: 70%;" id="resetPasswordButton" data-testid="resetPasswordButton">Επιβεβαίωση Αλλαγής</button>
    </div>
    <input asp-for="Token" value="@tokenValue" hidden/>
    <input asp-for="UserId" value="@userId" hidden />
    <input asp-for="Email" value="@ViewData["UserEmail"]" hidden/>
</form>

<script type="text/javascript" src="~/js/customValidation.js"></script>
<script type="text/javascript" src="~/js/customAlerts.js"></script>

<script>
    setUpValidationListeners();
    setUpFormSubmissionValidationListener("resetPasswordForm");

    function updateFormSizeClasses() {
        const resetPasswordForm = document.getElementById("resetPasswordForm");
        const resetPasswordButton = document.getElementById("resetPasswordButton");
        if(window.innerWidth >= 992){
            resetPasswordForm.classList.remove("offset-1", "col-10",
            "offset-md-2", "col-md-8");

            resetPasswordForm.classList.add("mx-auto", "w-100");
            resetPasswordButton.textContent = "Επιβεβαίωση Αλλαγής Συνθηματικού";
        }
        else{
            resetPasswordForm.classList.add("offset-1", "col-10",
            "offset-md-2", "col-md-8");

            resetPasswordForm.classList.remove("mx-auto", "w-100");
            resetPasswordButton.textContent = "Επιβεβαίωση Αλλαγής";
        }
    }

    window.addEventListener("load", updateFormSizeClasses);
    window.addEventListener("resize", updateFormSizeClasses);

    const userNotFoundWithGivenEmail = '@TempData["UserNotFoundWithGivenEmail"]' === 'True';
    const userAccountNotActivated = '@TempData["userAccountNotActivated"]' === 'True';
    const unknownError = '@TempData["UnknownError"]' === 'True';

    if (userNotFoundWithGivenEmail) {
        setTimeout(showAlert('resetPasswordErrorAlert',
            "Αποτυχία Αλλαγής Συνθηματικού", "Δεν υπάρχει λογαριασμός με το συγκεκριμένο λογαριασμό ταχυδρομείου. Παρακαλώ δοκιμάστε ξανά με διαφορετικό λογαριασμό.",
            "Αποτυχία", "Δεν υπάρχει λογαριασμός με το συγκεκριμένο λογαριασμό ταχυδρομείου"), 100);
    }
    else if (userAccountNotActivated) {
        setTimeout(showAlert('resetPasswordErrorAlert',
            "Αποτυχία Αλλαγής Συνθηματικού", "Ο συγκεκριμένος λογαριασμός ταχυδρομείου δεν έχει ενεργοποιηθεί. Παρακαλώ ενεργοποιήστε τον λογαριαμό σας με το email επιβεβαίωσης που έχει σταλθεί στον λογιαρσμό σας πριν δοκιμάσετε ξανά.",
            "Αποτυχία", "Ο συγκεκριμένος λογαριασμός ταχυδρομείου δεν έχει ενεργοποιηθεί. Παρακαλώ ενεργοποιήστε τον λογαριαμό σας με το email επιβεβαίωσης που έχει σταλθεί στον λογιαρσμό σας πριν δοκιμάσετε ξανά."), 100);
    }
    else if (unknownError) {
        setTimeout(showAlert('resetPasswordErrorAlert',
            "Αποτυχία Αλλαγής Συνθηματικού", "Κάποιο πρόβλημα συνέβη με τα δεδομένα που δώσατε. Παρακαλώ δοκιμάστε ξανά με διαφορετικά δεδομένα ή δοκιμάστε αργότερα.",
            "Αποτυχία", "Απρόβλεπρο πρόβλημα. Παρακαλώ δοκιμάστε ξανά με διαφορετικά δεδομένα."), 100);
    }
</script>

