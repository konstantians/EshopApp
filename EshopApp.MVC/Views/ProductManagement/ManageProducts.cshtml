@model List<UiProduct>

@{
    ViewData["Title"] = "Manage Products";
    // List<UiRole>? roles = ViewData["UserRoles"] as List<UiRole>;
    // List<(string, int)> roleCounts = Model
    //     .GroupBy(user => user.UserRoleName!)
    //     .Select(group => (Role: group.Key, Count: group.Count()))
    //     .ToList();
}

<style>
    li.disabled {
        pointer-events: none; /* blocks clicks */
        opacity: 0.2; /* makes it look dimmed */
    }

    .card:hover {
        box-shadow: 0 3px 15px rgba(0, 0, 0, 0.3);
    }

    .dropdown-menu {
        min-width: 100%; /* at least as wide as the button */
        width: auto; /* but grow if needed */
    }
</style>

<link href="~/css/filtersStyles.css" rel="stylesheet" />

<div class="row mb-3">
    <div class="col-3 col-xl-2 d-flex align-items-center px-2 px-sm-0 d-none d-md-block" id="itemViewDropdownContainer">
        <div class="dropdown">
            <button class="form-select text-start custom-outline" type="button" id="itemViewDropdown" data-bs-toggle="dropdown">Προβολή Προϊόντων</button>
            <ul class="dropdown-menu py-0">
                <li><a class="dropdown-item" href="#" data-view="product">Προβολή Προϊόντων</a></li>
                <li><a class="dropdown-item" href="#" data-view="variant">Προβολή Παραλλαγών</a></li>
            </ul>
        </div>
    </div>
    <div class="offset-2 offset-sm-3 offset-md-0 col-8 col-sm-6 col-xl-8 text-center">
        <h3 class="mb-0" id="pageTitle">Προϊόντα Εφαρμογής</h3>
    </div>
    <div class="col-2 col-sm-3 col-xl-2 m-0 text-end px-2 px-sm-0 px-lg-2">
        <a class="btn btn-outline-primary border border-1 px-2 py-1" id="createProductButton" asp-controller="ProductManagement" asp-action="CreateProduct">Δημιουργία Προϊόντος</a>
    </div>
</div>

<button id="filterToggleButton" class="btn btn-primary rounded-0 d-xl-none px-3" style="position: fixed; top: 320px; left: 0px; z-index: 1050; transform: rotate(-90deg);
            transform-origin: top left; background-color:white !important; color: var(--accent-orange) !important; border: #aaa solid 1px; border-top:none; transition: left 0.4s ease;">
    Φίλτρα
</button>

<div class="row">
    <div class="col-3" id="filtersSection">
        <div class="card" style="position: sticky !important; top:135px; align-self:flex-start !important;" id="cardFilters">
            <div class="card-header d-none d-xl-block">
                <h4 class="text-center mb-0">Φίλτρα</h4>
            </div>
            <div class="card-body">
                <div class="p-3 border border-1 mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <label id="searchLabel" for="searchInput" class="mt-1">ΑΝΑΖΗΤΗΣΗ</label>
                        <div class="btn-group dropdown" role="group">
                            <button type="button" class="btn btn-primary"> <i id="searchButtonIconIndicator" class="fa-solid fa-box"></i> </button>
                            <button type="button" class="btn btn-dark dropdown-toggle" style="width:40px;" data-bs-toggle="dropdown" aria-expanded="false"></button>
                            <div class="dropdown-menu dropdown-menu-end py-0" style="margin-top: 0 !important;">
                                <a class="dropdown-item d-flex justify-content-between align-items-center" href="#" data-search-mode="name" data-search-mode-icon="fa-box">Αναζήτηση με Τίτλο<i class="fa-solid fa-box ms-2"></i></a>
                                <a class="dropdown-item d-flex justify-content-between align-items-center" href="#" data-search-mode="code" data-search-mode-icon="fa-tag">Αναζήτηση με Κωδικό<i class="fa-solid fa-tag ms-2"></i></a>
                                <a class="dropdown-item d-flex justify-content-between align-items-center" href="#" data-search-mode="sku" data-search-mode-icon="fa-hashtag">Αναζήτηση με SKU<i class="fa-solid fa-hashtag ms-2"></i></a>
                            </div>
                        </div>
                    </div>
                    <div class="input-group mt-3">
                        <input type="text" class="form-control" id="searchInput" value="">
                        <a class="btn btn-primary" id="searchButton"><i class="fas fa-search"></i></a>
                    </div>
                </div>

                @{
                    Dictionary<(decimal min, decimal max), int> priceRanges = new Dictionary<(decimal, decimal), int>
                    {
                        {(0, 20), 0},
                        {(20, 40), 0},
                        {(40, 60), 0},
                        {(60, 80), 0},
                        {(80, 100), 0},
                        {(100, 120), 0},
                        {(120, 140), 0},
                        {(140, 160), 0},
                        {(160, 180), 0},
                        {(180, 200), 0}
                    };

                    Dictionary<(int min, int max), int> stockVolumes = new Dictionary<(int, int), int>
                    {
                        {(0, 10), 0},
                        {(10, 20), 0},
                        {(20, 30), 0},
                        {(30, 40), 0},
                        {(40, 50), 0},
                        {(50, 60), 0},
                        {(60, 70), 0},
                        {(70, 80), 0},
                        {(80, 90), 0},
                        {(90, 100), 0}
                    };

                    Dictionary<string, int> categoryVolumes = new Dictionary<string, int>();

                    List<(decimal min, decimal max)> intervals = priceRanges.Keys.ToList();
                    List<(int min, int max)> stockIntervals = stockVolumes.Keys.ToList();
                }

                @foreach (UiProduct product in Model)
                {
                    foreach (UiVariant variant in product.Variants)
                    {
                        int stock = variant.UnitsInStock!.Value;
                        foreach (var key in stockIntervals)
                        {
                            if (stock >= key.min && stock < key.max)
                            {
                                stockVolumes[key]++;
                                break;
                            }
                        }

                        decimal price = variant.Price!.Value;
                        foreach (var key in intervals)
                        {
                            if (price >= key.min && price < key.max)
                            {
                                priceRanges[key]++;
                                break;
                            }
                        }
                    }

                    if (product.Categories is null || product.Categories.Count == 0)
                    {
                        if (categoryVolumes.TryGetValue("Καμία Κατηγορία", out int volume))
                            categoryVolumes["Καμία Κατηγορία"] += 1;
                        else
                            categoryVolumes["Καμία Κατηγορία"] = 1;
                        continue;
                    }

                    foreach (UiCategory category in product.Categories)
                    {
                        if(categoryVolumes.TryGetValue(category.Name!, out int volume))
                            categoryVolumes[category.Name!] += 1;
                        else
                            categoryVolumes[category.Name!] = 1;
                    }
                }

                <div class="custom-accordion-item">
                    <button class="custom-accordion-button" type="button" aria-expanded="false">
                        ΚΑΤΗΓΟΡΙΑ
                    </button>
                    <div class="custom-accordion-content" id="categoryFiltersUl">
                        <ul class="list-unstyled">
                            @foreach (KeyValuePair<string, int> categoryVolume in categoryVolumes)
                            {
                                <li class="toggle-check d-flex justify-content-between align-items-center px-2 py-1 hover-highlight" data-filter="@categoryVolume.Key">
                                    <label class="mb-0 text-smaller" style="cursor:pointer;">@categoryVolume.Key (@categoryVolume.Value)</label>
                                    <input type="checkbox" class="form-check-input rounded-0" style="cursor:pointer;">
                                </li>
                            }
                        </ul>
                    </div>
                </div>

                <div class="custom-accordion-item d-none" data-hide-on-product-view>
                    <button class="custom-accordion-button" type="button" aria-expanded="false">
                        ΤΙΜΗ
                    </button>
                    <div class="custom-accordion-content">
                        <ul class="list-unstyled" id="priceFiltersUl">
                            @foreach (var key in intervals)
                            {
                                string filterStyling =  priceRanges[key] > 0 ? "hover-highlight" : "disabled";
                                <li class="toggle-check d-flex justify-content-between align-items-center px-2 py-1 @filterStyling" data-filter="@key" data-filter-interval-start="@key.min" data-filter-interval-end="@key.max">
                                    <label class="mb-0 text-smaller" style="cursor:pointer;">@key.min&euro; - @key.max&euro; (@priceRanges[key])</label>
                                    <input type="checkbox" class="form-check-input rounded-0" style="cursor:pointer;">
                                </li>
                            }
                        </ul>
                    </div>
                </div>

                <div class="custom-accordion-item d-none" data-hide-on-product-view>
                    <button class="custom-accordion-button" type="button" aria-expanded="false">
                        ΑΠΟΘΕΜΑ
                    </button>
                    <div class="custom-accordion-content">
                        <ul class="list-unstyled" id="unitsInStockFiltersUl">
                            @foreach (var key in stockIntervals)
                            {
                                string filterStyling = @stockVolumes[key] > 0 ? "hover-highlight" : "disabled";
                                <li class="toggle-check d-flex justify-content-between align-items-center px-2 py-1 @filterStyling" data-filter="@key" data-filter-interval-start="@key.min" data-filter-interval-end="@key.max">
                                    <label class="mb-0 text-smaller" style="cursor:pointer;">@key.min - @key.max (@stockVolumes[key])</label>
                                    <input type="checkbox" class="form-check-input rounded-0" style="cursor:pointer;">
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-xl-9" id="objectsSection">
        <div class="row mb-1 mb-sm-2 px-2 px-sm-0 px-lg-2">
            <div class="col-12 col-md-6 px-0">
                <ul class="pagination justify-content-md-start justify-content-center align-items-center mb-1 mb-md-0 @(Model.Count > 18 ? "" : "d-none")" id="paginationUl" data-total-items="@Model.Count">
                    <li class="page-item me-1" id="goToFirstPaginationLi">
                        <a class="page-link special rounded-0" style="padding-top:4px !important; padding-bottom:4px !important; width:35px;" href="?page=0">
                            <span aria-hidden="true" class="text-md-biggest">«</span>
                        </a>
                    </li>
                    <li class="page-item me-1" id="goToPreviousPaginationLi">
                        <a class="page-link special rounded-0" style="padding-top:4px !important; padding-bottom:4px !important; width:35px;" href="?page=0">
                            <span class="text-md-biggest" aria-hidden="true">‹</span>
                        </a>
                    </li>
                    <li class="page-item active page-li">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">1</a>
                    </li>
                    <li class="page-item page-li @(Model.Count > 54 ? "" : "d-none")">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">2</a>
                    </li>
                    <li class="page-item page-li @(Model.Count > 72 ? "" : "d-none")">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">3</a>
                    </li>
                    <li class="page-item page-li @(Model.Count > 90 ? "" : "d-none")">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">4</a>
                    </li>
                    <li class="page-item disabled @(Model.Count > 108 ? "" : "d-none")">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">…</a>
                    </li>
                    <li class="page-item page-li">
                        <a class="page-link no-background text-md-bigger" style="padding-right:3px !important; padding-left:3px !important;" href="#">@Math.Ceiling((double)@Model.Count / 18) </a>
                    </li>
                    <li class="page-item ms-1" id="goToNextPaginationLi">
                        <a class="page-link special rounded-0" style="padding-top:4px !important; padding-bottom:4px !important; width:35px;" href="?page=1">
                            <span aria-hidden="true" class="text-md-biggest">›</span>
                        </a>
                    </li>
                    <li class="page-item ms-1" id="goToLastPaginationLi">
                        <a class="page-link special rounded-0" style="padding-top:4px !important; padding-bottom:4px !important; width:35px;" href="?page=1182">
                            <span aria-hidden="true" class="text-md-biggest">»</span>
                        </a>
                    </li>
                </ul>
            </div>
            <div class="col-12 col-md-6 px-0 mb-1 mb-sm-0">
                <div class="d-flex gap-2 justify-content-md-end justify-content-sm-center justify-content-between">
                    <div class="dropdown option-dropdown">
                        <button class="btn dropdown-toggle rounded-0 text-md-bigger px-1 px-sm-3" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="background-color:#F5F5F5;">Προεπιλεγμένη Σειρά</button>
                        <ul class="dropdown-menu py-0" id="sortingDropdown">
                            <li data-order="defaultOrder"><a class="dropdown-item" href="#">Προεπιλεγμένη Σειρά</a></li>
                            <li class="d-none" data-order="price" data-order-direction="descending" data-numeric data-hide-on-product-view><a class="dropdown-item" href="#">Τιμή Φθίνουσα Σειρά</a></li>
                            <li class="d-none" data-order="price" data-order-direction="ascending" data-numeric data-hide-on-product-view><a class="dropdown-item" href="#">Τιμή Αύξουσα Σειρά</a></li>
                            <li class="d-none" data-order="unitsInStock" data-order-direction="descending" data-numeric data-hide-on-product-view><a class="dropdown-item" href="#">Απόθεμα Φθίνουσα Σειρά</a></li>
                            <li class="d-none" data-order="unitsInStock" data-order-direction="ascending" data-numeric data-hide-on-product-view><a class="dropdown-item" href="#">Απόθεμα Αύξουσα Σειρά</a></li>
                        </ul>
                    </div>
                    <div class="dropdown option-dropdown">
                        <button class="btn dropdown-toggle rounded-0 text-md-bigger px-1 px-sm-3" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="background-color:#F5F5F5;" id="pagesDropdown">18 Ανά Σελίδα</button>
                        <ul class="dropdown-menu py-0">
                            <li><a class="dropdown-item" onclick="updateItemsPerPage(18)" href="#">18 Ανά Σελίδα</a></li>
                            <li><a class="dropdown-item" onclick="updateItemsPerPage(36)" href="#">36 Ανά Σελίδα</a></li>
                            <li><a class="dropdown-item" onclick="updateItemsPerPage(72)" href="#">72 Ανά Σελίδα</a></li>
                            <li><a class="dropdown-item" onclick="updateItemsPerPage(120)" href="#">120 Ανά Σελίδα</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div class="row px-2 px-sm-0 px-md-0 px-lg-2" id="itemsContainer">
            <div class="table-responsive w-100 p-0">
                <table class="table table-hover table-striped" id="productsTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Τίτλος</th>
                            <th>Κωδικός</th>
                            <th class="d-none" data-hide-on-product-view>SKU</th>
                            <th class="d-none" data-hide-on-product-view>Τιμή</th>
                            <th class="d-none" data-hide-on-product-view>Απόθεμα</th>
                            <th>Επεξεργασία</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int counter = 0;
                        }
                        @foreach (UiProduct product in Model)
                        {
                            if (counter > 17)
                                break;

                            <tr>
                                <td>@product.Name</td>
                                <td>@product.Code</td>
                                <td class="text-nowrap">
                                    <a class="btn btn-sm btn-primary me-2" asp-controller="productManagement" asp-action="EditProduct" asp-route-productId="@product.Id"><i class="fas fa-pen"></i></a>
                                    <a class="btn btn-sm btn-secondary" data-bs-toggle="modal" data-bs-target="#deleteProductConfirmationModal-@product.Id"><i class="fas fa-trash"></i></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@foreach (UiProduct product in Model)
{
    <div class="modal fade custom-center-modal" id="deleteProductConfirmationModal-@product.Id" tabindex="-1">
        <div class="modal-dialog">
            <form class="modal-content" method="post" asp-controller="ProductManagement" asp-action="DeleteProduct" id="deleteProductForm-@product.Id">
                <div class="modal-header">
                    <h5 class="modal-title">Επιβεβαίωση Διαγραφής Προϊόντος</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <strong style="font-size: 18px;">Η παρακάτω ενέργεια δεν είναι αντιστρέψιμη!</strong>
                    <p>
                        Αν είστε σίγουροι πως θέλετε να διαγράψατε το συγκεκριμένο προϊόν παρακαλώ συμπληρώστε τον κωδικό του προϊόντος και πατήστε συνέχεια. Όλες οι παραλλαγές του προϊόντος
                        θα διαγραφτούν αν προχωρίσετε! Σε περίπτωση που το προϊόν υπάρχει σε κάποια παραγγελία, τότε απλώς θα απενεργοποιηθεί μέχρι να διαγραφτούν όλες οι παραγγελίες στις οποίες αυτό υπάρχει.
                    </p>
                    <label for="modalDeleteProductInput-@product.Id" class="form-label"><i class="fa-solid fa-envelope me-2"></i>Κωδικός Προϊόντος</label>
                    <input class="form-control" id="modalDeleteProductInput-@product.Id" type="text" data-custom-validation="false" data-testid="productCodeInput" data-code="@product.Code">
                    <span id="modalDeleteProductValidationSpan-@product.Id" class="text-danger"></span>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-testid="cancelDeleteProductButton">Ακύρωση</button>
                    <button type="submit" class="btn btn-primary" id="deleteProductButton" data-testid="deleteProductButton">Συνέχεια</button>
                </div>
                <input name="productId" value="@product.Id" hidden />
            </form>
        </div>
    </div>

    foreach (UiVariant variant in product.Variants)
    {
        <div class="modal fade custom-center-modal" id="deleteVariantConfirmationModal-@variant.Id" tabindex="-1">
            <div class="modal-dialog">
                <form class="modal-content" method="post" asp-controller="ProductManagement" asp-action="DeleteVariant" id="deleteVariantForm-@variant.Id">
                    <div class="modal-header">
                        <h5 class="modal-title">Επιβεβαίωση Διαγραφής Παραλλαγής Προϊόντος</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <strong style="font-size: 18px;">Η παρακάτω ενέργεια δεν είναι αντιστρέψιμη!</strong>
                        <p>
                            Αν είστε σίγουροι πως θέλετε να διαγράψατε την συγκεκριμένη παραλλαγή προϊόντος παρακαλώ συμπληρώστε το SKU της παραλλαγής και πατήστε συνέχεια. Σε περίπτωση που η παραλλαγή προϊόντος υπάρχει
                            σε κάποια παραγγελία, τότε απλώς θα απενεργοποιηθεί μέχρι να διαγραφτούν όλες οι παραγγελίες στις οποίες αυτή υπάρχει.
                        </p>
                        <label for="modalDeleteVariantInput-@variant.Id" class="form-label"><i class="fa-solid fa-envelope me-2"></i>SKU Παραλλαγής Προϊόντος</label>
                        <input class="form-control" id="modalDeleteVariantInput-@variant.Id" type="text" data-custom-validation="false" data-testid="variantSkuInput" data-sku="@variant.SKU">
                        <span id="modalDeleteVariantValidationSpan-@variant.Id" class="text-danger"></span>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-testid="cancelDeleteVariantButton">Ακύρωση</button>
                        <button type="submit" class="btn btn-primary" id="deleteVariantButton" data-testid="deleteVariantButton">Συνέχεια</button>
                    </div>
                    <input name="variantId" value="@variant.Id" hidden />
                </form>
            </div>
        </div>
    }
}

<div class="modal fade custom-center-modal modal-result" data-bs-backdrop="static" id="resultModal" data-testid="resultModal" data-popUpValue="" tabindex="-1">
    <div class="modal-dialog modal-confirm">
        <div class="modal-content">
            <div class="modal-header border-0">
                <div class="icon-box">
                    <i class="fas fa-check"></i>
                </div>
                <h4 class="modal-title w-100" id="myModalLabel"></h4>
            </div>
            <div class="modal-body">
                <p class="text-center"></p>
            </div>
            <div class="modal-footer d-flex justify-content-center">
                <button class="btn btn-primary w-75" data-bs-dismiss="modal" data-testid="resultModalCloseButton">Εντάξει</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="~/js/customModals.js"></script>
    <script type="text/javascript" src="~/js/customSelect.js"></script>
    <script type="text/javascript" src="~/js/filtersBehaviour.js"></script>
    <script type="text/javascript" src="~/js/filtersRepeatedNonStaticCode.js"></script>

    <script>
        let products = JSON.parse('@Html.Raw(Json.Serialize(Model))');
        let variantsWithProductInformation = [];
        let currentViewMode = "ProductView";

        for (let i = 0; i < products.length; i++) {
            products[i].isFilteredBySearch = false;
            products[i].protectedByCategoryLis = [];

            for (let j = 0; j < products[i].variants.length; j++) {
                let variantWithProductInformation = {
                    originalIndex: i,
                    productId: products[i].id,
                    categories: products[i].categories,
                    name: products[i].name,
                    code: products[i].code,
                    variantId: products[i].variants[j].id,
                    sku: products[i].variants[j].sku,
                    price: products[i].variants[j].price,
                    unitsInStock: products[i].variants[j].unitsInStock,
                    isFilteredBySearch: false,
                    protectedByCategoryLis: [],
                    protectedByPriceLis: [],
                    protectedByUnitsInStockLis: []
                };

                variantsWithProductInformation.push(variantWithProductInformation);
            }
        }

        let tbody = document.getElementById('productsTable').querySelector('tbody');
        let isCategoryFilterActive = { value: 0 };
        let isPriceFilterActive = { value: 0 };
        let isUnitsInStockFilterActive = { value: 0 };

        /* pagination change */
        document.addEventListener('pagination:pageChange', function (event) {
            if(currentViewMode === "ProductView"){
                renderTable(products);
            }
            else{
                renderTable(variantsWithProductInformation);
            }
        });

        /* items per page change */
        document.addEventListener('itemsPerPage:changed', function (event) {
            if(currentViewMode === "ProductView"){
                renderTable(products);
            }
            else{
                renderTable(variantsWithProductInformation);
            }
        });

            function countHowManyEntriesAreLeftUnfilteredAndUpdatePagination() {
            let count = 0;
            itemsLeftForCheckBoxCounts = [];
            if(currentViewMode === "ProductView"){
                products.forEach(product => {
                    let filteredByCheckBox = true;
                    if (true) {
                        filteredByCheckBox = false;
                        //itemsLeftForCheckBoxCounts.push(product);
                        itemsLeftForCheckBoxCounts.push({item: product, blockedBy: "nothing"});
                    }


                    if (!product.isFilteredBySearch && !filteredByCheckBox) {
                        count++;
                    }
                });
            }
            else{
                variantsWithProductInformation.forEach(variantWithProductInformation => {
                    let blockedBy = []
                    if (isPriceFilterActive.value !== 0 && variantWithProductInformation.protectedByPriceLis.length === 0) {
                        blockedBy.push("price");
                    }

                    if (isUnitsInStockFilterActive.value !== 0 && variantWithProductInformation.protectedByUnitsInStockLis.length === 0) {
                        blockedBy.push("unitsInStock");
                    }

                    if(blockedBy.length === 0){
                        itemsLeftForCheckBoxCounts.push({item: variantWithProductInformation, blockedBy: "nothing"});
                    }
                    else if(blockedBy.length === 1){
                        itemsLeftForCheckBoxCounts.push({item: variantWithProductInformation, blockedBy: blockedBy[0]});
                    }

                    let filteredByCheckBox = blockedBy.length > 0;

                    if (!variantWithProductInformation.isFilteredBySearch && !filteredByCheckBox) {
                        count++;
                    }
                });
            }

            updateTotalItems(count); //this exists in filtersBehaviour.js
            updateFilterCheckBoxesStylingAndCounts(itemsLeftForCheckBoxCounts);
        }

        function priceFilterCheckboxCheckedProcedures(liPriceRange, li){
            variantsWithProductInformation.forEach(variantWithProductInformation => {
                const variantPrice = variantWithProductInformation.price;
                let startIntervalPrice = parseFloat(li.dataset.filterIntervalStart);
                let endIntervalPrice = parseFloat(li.dataset.filterIntervalEnd);
                if (variantPrice >=  startIntervalPrice && variantPrice < endIntervalPrice) {
                    variantWithProductInformation.protectedByPriceLis.push(liPriceRange);
                }
            });

            isPriceFilterActive.value++;
        }

        function unitsInStockFilterCheckboxCheckedProcedures(liUnitsInStockRange, li){
            variantsWithProductInformation.forEach(variantWithProductInformation => {
                const unitsInStock = variantWithProductInformation.unitsInStock;
                let startIntervalPrice = parseFloat(li.dataset.filterIntervalStart);
                let endIntervalPrice = parseFloat(li.dataset.filterIntervalEnd);
                if (unitsInStock >=  startIntervalPrice && unitsInStock < endIntervalPrice) {
                    variantWithProductInformation.protectedByUnitsInStockLis.push(liUnitsInStockRange);
                }
            });

            isUnitsInStockFilterActive.value++;
        }

        function updateFilterCheckBoxesStylingAndCounts(itemsLeftForCheckBoxCounts){
            let priceRanges = new Map([
              [[0, 20], 0],
              [[20, 40], 0],
              [[40, 60], 0],
              [[60, 80], 0],
              [[80, 100], 0],
              [[100, 120], 0],
              [[120, 140], 0],
              [[140, 160], 0],
              [[160, 180], 0],
              [[180, 200], 0],
            ]);

            let stockVolumes = new Map([
              [[0, 10], 0],
              [[10, 20], 0],
              [[20, 30], 0],
              [[30, 40], 0],
              [[40, 50], 0],
              [[50, 60], 0],
              [[60, 70], 0],
              [[70, 80], 0],
              [[80, 90], 0],
              [[90, 100], 0],
            ]);

            let categoryVolumes = new Map();
            let priceIntervals = Array.from(priceRanges.keys());
            let stockIntervals = Array.from(stockVolumes.keys());

            for (let itemAndBlockedBy of itemsLeftForCheckBoxCounts){
                if(itemAndBlockedBy.blockedBy == "nothing" || itemAndBlockedBy.blockedBy == "unitsInStock"){
                    let unitsInStock = itemAndBlockedBy.item.unitsInStock;
                    for (let key of stockIntervals) {
                        let [min, max] = key;
                        if (unitsInStock >= min && unitsInStock < max) {
                            stockVolumes.set(key, stockVolumes.get(key) + 1);
                            break;
                        }
                    }
                }

                if(itemAndBlockedBy.blockedBy == "nothing" || itemAndBlockedBy.blockedBy == "price"){
                    let price = itemAndBlockedBy.item.price;
                    for (let key of priceIntervals) {
                        let [min, max] = key;
                        if (price >= min && price < max) {
                            priceRanges.set(key, priceRanges.get(key) + 1);
                            break;
                        }
                    }
                }

                if(itemAndBlockedBy.blockedBy == "nothing" || itemAndBlockedBy.blockedBy == "category"){
                    if (!itemAndBlockedBy.item.categories || itemAndBlockedBy.item.categories.length === 0) {
                        categoryVolumes.set("Καμία Κατηγορία", (categoryVolumes.get("Καμία Κατηγορία") || 0) + 1);
                    }
                    else{
                        for (let category of itemAndBlockedBy.item.categories) {
                            categoryVolumes.set(category.name, (categoryVolumes.get(category.name) || 0) + 1);
                        }
                    }
                }
            }

            updateIntervalCheckBoxLis('price', priceRanges, '€');
            updateIntervalCheckBoxLis('unitsInStock', stockVolumes);
            updateValueCheckBoxLi('category', categoryVolumes);
        }

        //these 2 functions are used by renderTable function in filtersRepeatedNonStaticCode
        function checkIfItemFilteredByCheckboxFilters(item){
            if(currentViewMode === "ProductView"){
                return false;
            }
            else{
                return (isPriceFilterActive.value > 0 && item.protectedByPriceLis.length === 0) || (isUnitsInStockFilterActive.value > 0 && item.protectedByUnitsInStockLis.length === 0);
            }
        }

        function addTrToTableBody(item){
            const tr = document.createElement('tr');
            if(currentViewMode === "ProductView"){
                tr.innerHTML = `
                    <td>${item.name}</td>
                    <td>${item.code}</td>
                    <td class="text-nowrap">
                        <a class="btn btn-sm btn-primary me-2" href="/productManagement/EditProduct?productId=${item.id}"><i class="fa-solid fa-pen"></i></a>
                        <a class="btn btn-sm btn-secondary" data-bs-toggle="modal" data-bs-target="#deleteProductConfirmationModal-${item.id}"><i class="fa-solid fa-trash"></i></a>
                    </td>
                `;
            }
            else{
                tr.innerHTML = `
                    <td>${item.name}</td>
                    <td>${item.code}</td>
                    <td>${item.sku ?? ''}</td>
                    <td>${item.price !== undefined ? item.price + ' €' : 'N/A'}</td>
                    <td>${item.unitsInStock ?? '0'}</td>
                    <td class="text-nowrap">
                        <a class="btn btn-sm btn-primary me-2" href="/productManagement/EditProduct?productId=${item.productId}&variantId=${item.variantId}"><i class="fa-solid fa-pen"></i></a>
                        <a class="btn btn-sm btn-secondary" data-bs-toggle="modal" data-bs-target="#deleteVariantConfirmationModal-${item.variantId}"><i class="fa-solid fa-trash"></i></a>
                    </td>
                `;
            }
            tbody.appendChild(tr);
        }

        sortingListeners = setUpSortingDropdownListeners(products);
        searchInputIconListeners = setUpSearchInputMode(products, countHowManyEntriesAreLeftUnfilteredAndUpdatePagination);
        searchInputListener = setUpSearchInput(products, countHowManyEntriesAreLeftUnfilteredAndUpdatePagination);
        setUpCheckBoxFilterUl('priceFiltersUl', priceFilterCheckboxCheckedProcedures, 'protectedByPriceLis', isPriceFilterActive, variantsWithProductInformation, countHowManyEntriesAreLeftUnfilteredAndUpdatePagination);
        setUpCheckBoxFilterUl('unitsInStockFiltersUl', unitsInStockFilterCheckboxCheckedProcedures, 'protectedByUnitsInStockLis', isUnitsInStockFilterActive, variantsWithProductInformation, countHowManyEntriesAreLeftUnfilteredAndUpdatePagination);

        /* ------------------------------------- */

        //TODO check that all the variants stuff work
        //this will change the filters and what the user is seeings(variants or only products)
        function switchViewModes(){
            document.querySelectorAll('[id*="FiltersUl"]').forEach(filterUl => {
                filterUl.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                    checkbox.checked = false;
                });
            });

            resetAllFilters();
            removeSortingDropdownListeners(sortingListeners)
            removeSearchInputModeListeners(searchInputIconListeners)
            removeSearchInputListener(searchInputListener)
            //sort them again by default order
            products.sort((productA, productB) => productA.originalIndex - productB.originalIndex);
            variantsWithProductInformation.sort((variantWithProductInformationA, variantWithProductInformationB) => variantWithProductInformationA.originalIndex - variantWithProductInformationB.originalIndex);


            if(currentViewMode === "ProductView"){
                currentViewMode = "VariantView";

                document.getElementById('pageTitle').textContent = 'Παραλλαγές Εφαρμογής';
                document.querySelectorAll('[data-hide-on-product-view]').forEach(item => {
                    item.classList.remove('d-none');
                });

                const variantsForCheckboxCounts = variantsWithProductInformation.map(v => ({ item: v, blockedBy: "nothing" }));
                updateFilterCheckBoxesStylingAndCounts(variantsForCheckboxCounts);
                renderTable(variantsWithProductInformation);

                sortingListeners = setUpSortingDropdownListeners(variantsWithProductInformation);
                searchInputIconListeners = setUpSearchInputMode(variantsWithProductInformation, countHowManyEntriesAreLeftUnfilteredAndUpdatePagination);
                searchInputListener = setUpSearchInput(variantsWithProductInformation, countHowManyEntriesAreLeftUnfilteredAndUpdatePagination);
            }
            else{
                currentViewMode = "ProductView";

                document.getElementById('pageTitle').textContent = 'Προϊόντα Εφαρμογής';
                document.querySelectorAll('[data-hide-on-product-view]').forEach(item => {
                    item.classList.add('d-none');
                });

                const productsForCheckboxCounts = products.map(p => ({item: p, blockedBy: "nothing"}));
                updateFilterCheckBoxesStylingAndCounts(productsForCheckboxCounts);
                renderTable(products);

                sortingListeners = setUpSortingDropdownListeners(products);
                searchInputIconListeners = setUpSearchInputMode(products, countHowManyEntriesAreLeftUnfilteredAndUpdatePagination);
                searchInputListener = setUpSearchInput(products, countHowManyEntriesAreLeftUnfilteredAndUpdatePagination);
            }
        }

        function resetAllFilters(){
            isCategoryFilterActive.value = 0;
            isPriceFilterActive.value = 0;
            isUnitsInStockFilterActive.value = 0;

            variantsWithProductInformation.forEach(variantWithProductInformation => {
                variantWithProductInformation.isFilteredBySearch = false;
                variantWithProductInformation.protectedByCategoryLis = [];
                variantWithProductInformation.protectedByPriceLis = [];
                variantWithProductInformation.protectedByUnitsInStockLis = [];
            })
        }

        /* ------------------------------------- */
        document.querySelectorAll('.custom-accordion-button').forEach(button => {
            button.addEventListener('click', function () {
                const content = this.nextElementSibling;
                const isExpanded = content.classList.contains('expanded');

                this.setAttribute('aria-expanded', !isExpanded);
                this.classList.toggle('collapsed', !isExpanded);
                content.classList.toggle('expanded', !isExpanded);
            });
        });

        let createProductButton = document.getElementById('createProductButton');
        let itemViewDropdown = document.getElementById('itemViewDropdown');
        function updateCreateProductButtonText() {
            if (window.innerWidth < 576) {
                createProductButton.innerHTML = '<i class="fa-solid fa-user-plus"></i>';
            }
            else if (window.innerWidth < 1770) {
                itemViewDropdown.innerHTML = itemViewDropdown.textContent.includes('Προϊόν') ? 'Προϊόντα' : 'Παραλλαγές';
                createProductButton.innerHTML = 'Δημιουργία';
                createProductButton.classList.remove('py-1', 'px-2');
            }
            else {
                itemViewDropdown.innerHTML = itemViewDropdown.textContent.includes('Προϊόν') ? 'Προβολή Προϊόντων' : 'Προβολή Παραλλαγών';
                createProductButton.innerHTML = 'Δημιουργία Προϊόντος';
                createProductButton.classList.remove('py-1', 'px-2');
            }

            createProductButton.classList.remove('d-none');
        }

        window.addEventListener("load", updateCreateProductButtonText);
        window.addEventListener("resize", updateCreateProductButtonText);

        function updateObjectsContainer() {
            if (window.innerWidth < 1650) {
                objectsSection.classList.remove('col-xl-9');
                objectsSection.classList.add('col-xl-8');
            }
            else if (window.innerWidth < 2350) {
                objectsSection.classList.add('col-xl-9');
                objectsSection.classList.remove('col-xl-8');
            }
            //for very big screens
            else {
                objectsSection.classList.add('col-xl-9');
                objectsSection.classList.remove('col-xl-8');
            }
        }

        window.addEventListener("load", updateObjectsContainer);
        window.addEventListener("resize", updateObjectsContainer);

        function fixPaddingIssuesForViewDropdown(){
            let itemViewDropdownContainer = document.getElementById('itemViewDropdownContainer');

            if (window.innerWidth >= 1200) {
                itemViewDropdownContainer.classList.remove('px-2', 'px-sm-0', 'px-lg-2');
            } else {
                itemViewDropdownContainer.classList.add('px-2', 'px-sm-0', 'px-lg-2');
            }
        }

        window.addEventListener("load", fixPaddingIssuesForViewDropdown);
        window.addEventListener("resize", fixPaddingIssuesForViewDropdown);

        setUpCustomSelect('itemViewDropdown', 'none', 'none', (item) => {
            if((item.textContent.includes('Προϊόν') && currentViewMode !== "ProductView") || (item.textContent.includes('Παραλλαγ') && currentViewMode === "ProductView")){
                switchViewModes();

                if(window.innerWidth < 1770){
                    return itemViewDropdown.textContent.includes('Προϊόν') ? 'Παραλλαγές' : 'Προϊόντα';
                }
                else{
                    return itemViewDropdown.textContent.includes('Προϊόν') ? 'Προβολή Παραλλαγών' : 'Προβολή Προϊόντων';
                }
            }
            //this means that the user clicked on the same mode
            return itemViewDropdown.textContent;
        });

        /* Delete Account Custom Modal Validation */
        setUpDeleteModalsCustomValidationAndSubmissionProcedures('deleteProductConfirmationModal', 'deleteProductForm', 'modalDeleteProductInput', 'data-code', "The provided value does not match the product's code");
        setUpDeleteModalsCustomValidationAndSubmissionProcedures('deleteVariantConfirmationModal', 'deleteVariantForm', 'modalDeleteVariantInput', 'data-sku', "The provided value does not match the variant's sku");

        /* Server Validation Handling */
        const productDeletionSuccess = '@TempData["ProductDeletionSuccess"]' === 'True';
        const productDeletionSuccessWarning = '@TempData["ProductDeletionSuccessWarning"]' === 'True';
        const variantDeletionSuccess = '@TempData["VariantDeletionSuccess"]' === 'True';
        const variantDeletionSuccessWarning = '@TempData["VariantDeletionSuccessWarning"]' === 'True';

        const productCreationSuccess = '@TempData["ProductCreationSuccess"]' === 'True';
        const productNotFoundWithGivenId = '@TempData["ProductNotFoundWithGivenId"]' === 'True';
        const unknownError = '@TempData["UnknownError"]' === 'True';

        let resultModal = document.getElementById("resultModal");

        if (productDeletionSuccess) {
            resultModal.setAttribute("popUpValue", "productDeletionSuccess");
            showPopUpModal("resultModal", "Επιτυχία Διαγραφής Προϊόντος", "Το προϊόν και όλες οι παραλλαγές του διαγράφτηκαν επιτυχώς!", "Επιτυχία",
                "Το προϊόν και όλες οι παραλλαγές του διαγράφτηκαν επιτυχώς!", "success");
        }
        else if(productDeletionSuccessWarning){
            resultModal.setAttribute("popUpValue", "productDeletionSuccessWarning");
            showPopUpModal("resultModal", "Επιτυχία Διαγραφής Προϊόντος", "Το προϊόν απενεργοποιήθηκε, επειδή μία παραλλαγή του υπάρχει σε τουλάχιστον μία παραγγελία. Αν θέλετε να διαγραφτεί πλήρως πρέπει να διαγραφούν πρώτα όλες οι παραγγελίες στις οποίες βρίσκεται.", "Επιτυχία",
                "Το προϊόν απενεργοποιήθηκε, επειδή μία παραλλαγή του υπάρχει σε τουλάχιστον μία παραγγελία.", "success");
        }
        else if(variantDeletionSuccess){
            resultModal.setAttribute("popUpValue", "variantDeletionSuccess");
            showPopUpModal("resultModal", "Επιτυχία Διαγραφής Παραλλαγής Προϊόντος", "Η παραλλαγή προϊόντος διαγράφτηκε επιτυχώς!", "Επιτυχία",
                "Η παραλλαγή προϊόντος διαγράφτηκε επιτυχώς!", "success");
        }
        else if(variantDeletionSuccessWarning){
            resultModal.setAttribute("popUpValue", "productDeletionSuccessWarning");
            showPopUpModal("resultModal", "Επιτυχία Διαγραφής Προϊόντος", "Η παραλλαγή προϊόντος απενεργοποιήθηκε, επειδή υπάρχει σε τουλάχιστον μία παραγγελία. Αν θέλετε να διαγραφτεί πλήρως πρέπει να διαγραφούν πρώτα όλες οι παραγγελίες στις οποίες βρίσκεται.", "Επιτυχία",
                "Το παραλλαγή προϊόντος απενεργοποιήθηκε, επειδή υπάρχει σε τουλάχιστον μία παραγγελία.", "success");
        }
        else if(productCreationSuccess){
            resultModal.setAttribute("popUpValue", "productCreationSuccess");
            showPopUpModal("resultModal", "Επιτυχία Δημιουργίας Προϊόντος", "Το προϊόν δημιουργήθηκε επιτυχώς, μπορείτε να το διαχειριστείτε χρησιμοποιώντας αυτό το menu!", "Επιτυχία",
                "Το προϊόν δημιουργήθηκε επιτυχώς, μπορείτε να το διαχειριστείτε χρησιμοποιώντας αυτό το menu!", "success");
        }
        else if (productNotFoundWithGivenId) {
            resultModal.setAttribute("popUpValue", "productNotFoundWithGivenId");
            showPopUpModal('resultModal', "Αποτυχία Διαγραφής Προϊόντος", "Το προϊόν που προσπαθίσατε να διαγράψετε δεν βρέθηκε στο σύστημα. Παρακαλώ ανανεώστε την σελίδα σας και δοκιμάστε ξανά.",
                "Αποτυχία", "Το προϊόν που προσπαθίσατε να διαγράψετε δεν βρέθηκε στο σύστημα. Παρακαλώ ανανεώστε την σελίδα σας και δοκιμάστε ξανά.");
        }
        else if (unknownError) {
            resultModal.setAttribute("popUpValue", "unknownError");
            showPopUpModal('resultModal', "Αποτυχία", "Κάποιο πρόβλημα συνέβη από την μεριά του συστήματος. Παρακαλώ δοκιμάστε αργότερα.",
                "Αποτυχία", "Απρόβλεπρο πρόβλημα. Παρακαλώ δοκιμάστε αργότερα.");
        }

    </script>
}
